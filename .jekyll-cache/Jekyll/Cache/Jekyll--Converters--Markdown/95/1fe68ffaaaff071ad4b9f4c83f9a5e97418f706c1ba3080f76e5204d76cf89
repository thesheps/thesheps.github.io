I"ı <p>Welcome back! As I seem to have found my writing cadence I thought I‚Äôd keep on <em>ploughin‚Äô on</em> with
this series of build-a-thing posts. You can find the previous posts
<a href="https://medium.com/@thesheps/lets-build-a-thing-part-one-7b29e4f8e955">here</a> and
<a href="https://medium.com/@thesheps/lets-build-a-thing-part-two-64b74940f91a">here</a>. To re-cap, I‚Äôve:</p>

<ul>
  <li>
    <p>Configured my local dev environment for TypeScript.</p>
  </li>
  <li>
    <p>Devved a really simple implementation of the <a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer Pattern</a></p>
  </li>
</ul>

<p><br /></p>

<p>With these bits and bobs in place I‚Äôve got a really simple way of notifying components when
anything changes in my state. The <em>really</em> interesting bit comes next. I now want to build a
concrete <code class="language-plaintext highlighter-rouge">Observer</code> implementation which is able to traverse and update the DOM when the state
is modified. LET US WRITE A TEST.</p>

<script src="https://gist.github.com/thesheps/e68b45aedffec10a27b767ed2572d227.js"></script>

<p>In this gist I‚Äôve got a teeny-tiny class called <code class="language-plaintext highlighter-rouge">Toy</code>. Its responsibility now is simply to
register itself as an observer with whatever controller it is ‚Äúnewed up‚Äù with. Nice - we‚Äôre now
able to subscribe to changes in the state of our <code class="language-plaintext highlighter-rouge">Controller</code>, and can use it to update the
<strong>Document Object Model!</strong> So what kind of functionality do we want to add to this new class?
Initially I‚Äôd like to support the rendering out of <em>double moustaches</em> in a given document with
whatever contents are represented in the state of my <code class="language-plaintext highlighter-rouge">Controller</code>. EG:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div&gt;</span>
  
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Becomes:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div&gt;</span>
  Hello, World!
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Why doubly-moustachiod? Because there may be legitimate reasons why consumers of my lovely library
want to wrap pieces of text in single moustaches. Let‚Äôs not cause them a headache! So it looks
like there‚Äôs another simple piece of functionality here that we can drive out in a couple of other
tests! Let‚Äôs do that thing:</p>

<script src="https://gist.github.com/thesheps/33d93c2f1190fbc87664e2f491fed75d.js"></script>

<p>I‚Äôve updated my constructor to accept an additional parameter - The <code class="language-plaintext highlighter-rouge">HTMLElement</code> to render.
The <code class="language-plaintext highlighter-rouge">update</code> implementation of my Toy class now uses this ‚ÄúRoot‚Äù element to find and replace any
double-taches with the correctly-rendered content (as defined in the <code class="language-plaintext highlighter-rouge">state</code> of the Controller
class). I‚Äôve <em>also</em> updated the Controller‚Äôs <code class="language-plaintext highlighter-rouge">registerObserver</code> function such that it
automatically updates any newly-registered Observers. This means that all Observers get an
up-to-date copy of the Controller‚Äôs state when they are registered.</p>

<p>But what happens on a subsequent re-render? Let‚Äôs write another test and see!</p>

<center>
    <img src="http://localhost:4000/assets/posts/2019-06-24/failing-test.png" />
</center>

<p>So this is failing for a pretty good reason - As soon as I‚Äôve un-moustached the DOM I‚Äôve lost
the context of where the original moustaches <em>were</em>. Any subsequent un-moustachification is going
to fail because the moustaches are no longer there :pensive: - Let‚Äôs fix this!</p>

<script src="https://gist.github.com/thesheps/387db65690e04e92cda8408236ae96a2.js"></script>

<p>The latest version of the Toy class simply creates a deep clone of the original HTMLElement, and
uses <em>that</em> to find whatever moustaches are needed to be <strong>ELIMINATED</strong> from the DOM. This is an
extremely na√Øve implementation of dynamic DOM rendering, but is working well for this latest test
case. Just one thing, though - We‚Äôve not actually ‚Äúwired‚Äù this code up to an actual HTML page,
yet. It is all conjecture, whimsy and caprice. Let‚Äôs see about getting this sorted, as the old
adage goes:</p>

<p><br /></p>

<h1 id="integrate-early-and-often">Integrate Early and Often</h1>

<p>All I want to do here is serve a simple Index page, and have it construct an instance of Toy,
using a script tag. This, too we can drive out with tests! The below gist shows the overall
approach, and involves a couple of new <strong>npm</strong> dependencies, namely <code class="language-plaintext highlighter-rouge">supertest</code> and <code class="language-plaintext highlighter-rouge">express</code>.</p>

<script src="https://gist.github.com/thesheps/8cc467645411965508fe068d970dbe5d.js"></script>

<p>There are quite a few amendments to support this in the above Gist, so let‚Äôs take them all
individually.</p>

<h2 id="appjs">app.js</h2>

<p>This code file sets up an extremely simple web app using express. It serves everything under the
<em>dist</em> path as static assets, and serves the file <code class="language-plaintext highlighter-rouge">index.html</code> on the default route.</p>

<h2 id="serverjs">server.js</h2>

<p>Here we just bootstrap the Express server and serve the above app on port 5678</p>

<h2 id="indexhtml">index.html</h2>

<p>This is a simple skeletal html file with a single script reference which points to the transpiled
toy.js which is produced by Webpack, using the ts-loader. Notice how the script is the last thing
in the page? That‚Äôs pretty important‚Ä¶</p>

<h2 id="packagejson">package.json</h2>

<p>Here I‚Äôm just pointing out the brand new, swanky <code class="language-plaintext highlighter-rouge">serve</code> task which is going to both transpile
all of the tasty TypeScript into a single, transpiled artifact.</p>

<h2 id="servertestjs">server.test.js</h2>

<p>Here we just establish that Express is functioning correctly. That we are serving a vanilla HTML
page with a successful HTTP status code. We can continue to flesh this test out shortly, but for
now this is the minimum amount of stuff I want to assert on, quite frankly!</p>

<h2 id="indexts">index.ts</h2>

<p>This is the entry point for the application! It includes 3 exports. <strong>Toy</strong>, <strong>Controller</strong> and
<strong>MockController</strong>. We‚Äôre going to use MockController to bootstrap this trivial example, but
we‚Äôll make sure to exclude it from the app going forwards!</p>

<h2 id="webpackconfigjs">webpack.config.js</h2>

<p><strong>This is dead important!!</strong> As the context of toy-js is to be run in the browser, it‚Äôs extremely
important that the <em>library</em> option here is configured. This has the effect of <strong>namespacing</strong> the
transpiled JavaScript so that it is available in the browser. This, coupled with the fact that
all of the TypeScript classes need to have a <em>named export</em> is the key to making the library
available from a web browser. This took me longer than I care to admit to figure out‚Ä¶</p>

<p><br /></p>

<center>
  <img src="http://localhost:4000/assets/posts/2019-06-24/et-voila.png" />
</center>

<p><br /></p>

<p>Et voila! I know there‚Äôs been a bazillion things that I‚Äôve explored in this post, but it largely
boils down to a few main things. I‚Äôve created a simple Toy class which is able to parse and
manipulate the DOM. We‚Äôve then given a little effort to creating a <em>dead simple</em> test harness.
We‚Äôve learned a little more about our Webpack configuration, and specified a new default export
file which is used to export all the types we might need in the final, transpiled distribution.</p>

<p>My respect for the engineers behind React, Vue and other frameworks is growing exponentially! Next
time I‚Äôll look at extending the tests here to include some performance feedback. How long does
this thing take to render a simple parent div? What about child components?</p>

<p>IT‚ÄôS ALL TO PLAY FOR, BARRY!</p>
:ET